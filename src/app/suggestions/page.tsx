
'use client';

import { useState, useMemo } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Skeleton } from '@/components/ui/skeleton';
import { useWorkoutData, calculatePersonalRecords } from '@/hooks/use-workout-data';
import { suggestWorkout, SuggestWorkoutOutput } from '@/ai/flows/workout-suggestion';
import { Bot, Dumbbell, Sparkles, Lightbulb, Clock, Zap } from 'lucide-react';
import { PRELOADED_EXERCISES } from '@/lib/mock-data';
import AppLayout from '@/components/layout/AppLayout';

function formatWorkoutHistory(workouts: any[] | undefined): string {
    if (!workouts || workouts.length === 0) {
        return "No workouts recorded yet.";
    }
    const recentWorkouts = workouts.slice(0, 5);
    return recentWorkouts.map(w =>
        `On ${new Date(w.date).toLocaleDateString()}, user did: ${w.exercises.map((e: any) => `${e.name} (${e.sets}x${e.reps} at ${e.weight}kg)`).join(', ')}`
    ).join('; ');
}

export default function SuggestionsPage() {
    const { data } = useWorkoutData();
    const [suggestion, setSuggestion] = useState<SuggestWorkoutOutput | null>(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    const personalRecords = useMemo(() => calculatePersonalRecords(data?.workouts), [data?.workouts]);

    const availableExercises = useMemo(() => {
        const custom = data?.customExercises?.map(e => e.name) ?? [];
        const preloaded = PRELOADED_EXERCISES;
        const all = [...custom, ...preloaded];
        return Array.from(new Set(all));
    }, [data?.customExercises]);

    const handleGenerateWorkout = async () => {
        setLoading(true);
        setError(null);
        setSuggestion(null);
        try {
            const workoutHistory = formatWorkoutHistory(data?.workouts);
            const prSummary = personalRecords.map(pr => `${pr.exerciseName}: ${pr.weight}kg`).join(', ');

            const result = await suggestWorkout({
                workoutHistory,
                fitnessGoals: "Build muscle, increase strength, and improve overall fitness.",
                personalRecords: prSummary || "No personal records yet.",
                availableExercises: availableExercises,
            });
            setSuggestion(result);
        } catch (err) {
            console.error(err);
            setError("Sorry, I couldn't generate a workout right now. Please try again in a moment.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <AppLayout>
            <div className="w-full max-w-md mx-auto space-y-6">
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2 text-lg md:text-xl">
                            <Bot className="text-primary" />
                            AI Workout Suggestions
                        </CardTitle>
                        <CardDescription>Get a personalized workout plan generated by your AI coach.</CardDescription>
                    </CardHeader>
                    <CardFooter>
                        <Button onClick={handleGenerateWorkout} disabled={loading} className="w-full">
                            <Sparkles className="mr-2" />
                            {loading ? 'Generating...' : 'Generate a New Workout'}
                        </Button>
                    </CardFooter>
                </Card>

                {loading && <SuggestionSkeleton />}
                
                {error && (
                    <Card className="border-destructive">
                        <CardContent className="p-6 text-center text-destructive">
                            {error}
                        </CardContent>
                    </Card>
                )}

                {suggestion && <WorkoutSuggestionCard suggestion={suggestion} />}
            </div>
        </AppLayout>
    );
}

function WorkoutSuggestionCard({ suggestion }: { suggestion: SuggestWorkoutOutput }) {
    return (
        <Card className="animate-in fade-in-50">
            <CardHeader>
                <CardTitle className="text-xl">{suggestion.suggestionTitle}</CardTitle>
                <CardDescription className="flex items-center gap-2 pt-2">
                   <Lightbulb className="text-primary" size={16} /> {suggestion.workoutRationale}
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
                <div className="flex justify-around text-center text-sm text-muted-foreground">
                    <div className="flex flex-col items-center gap-1">
                        <Clock size={20} />
                        <span>{suggestion.duration}</span>
                    </div>
                    <div className="flex flex-col items-center gap-1">
                        <Zap size={20} />
                        <span>{suggestion.intensity}</span>
                    </div>
                </div>

                <div className="space-y-3">
                    {suggestion.suggestedExercises.map((ex, index) => (
                        <div key={index} className="bg-card-foreground/5 p-4 rounded-lg">
                            <div className="flex justify-between items-center">
                                <p className="font-semibold text-base">{ex.name}</p>
                                <p className="text-primary font-bold">{ex.sets} sets x {ex.reps} reps</p>
                            </div>
                            {ex.tip && (
                                <p className="text-xs text-muted-foreground mt-2 italic">
                                    <strong>Tip:</strong> {ex.tip}
                                </p>
                            )}
                        </div>
                    ))}
                </div>
            </CardContent>
        </Card>
    )
}

function SuggestionSkeleton() {
    return (
        <Card>
            <CardHeader>
                <Skeleton className="h-7 w-3/4" />
                <Skeleton className="h-4 w-full mt-2" />
                <Skeleton className="h-4 w-5/6 mt-1" />
            </CardHeader>
            <CardContent className="space-y-4">
                <div className="flex justify-around">
                    <Skeleton className="h-8 w-24" />
                    <Skeleton className="h-8 w-24" />
                </div>
                <div className="space-y-3 pt-4">
                    {[...Array(3)].map((_, i) => (
                        <div key={i} className="bg-card-foreground/5 p-4 rounded-lg">
                             <div className="flex justify-between items-center">
                                <Skeleton className="h-5 w-1/2" />
                                <Skeleton className="h-5 w-1/4" />
                            </div>
                            <Skeleton className="h-3 w-full mt-3" />
                        </div>
                    ))}
                </div>
            </CardContent>
        </Card>
    );
}
